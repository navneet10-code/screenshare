(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :
  typeof define === 'function' && define.amd ? define(factory) :
  (global.iframeScreenshare = factory());
}(this, (function () { 'use strict';

  var initialized = false;

  var initializeScreenShare = function initializeScreenShare(webstoreUrl, force) {
    if (!window.chrome || !window.chrome.webstore) {
      return; // this method works exclusively on chrome
    }
    if (initialized && !force) {
      return; // only initialize once on a single document
    }
    var handleMessage = function handleMessage(event) {
      if (!event || !event.data || event.data.type !== 'getScreen') {
        return;
      }
      var extId = window.sessionStorage.getScreenMediaJSExtensionId;
      if (!extId) {
        try {
          var getScreenMediaJSExtensionId = webstoreUrl.split('/').pop();
          window.open(webstoreUrl, '_webstore');
          setTimeout(function () {
            window.sessionStorage.getScreenMediaJSExtensionId = getScreenMediaJSExtensionId;
            if (event.data.installOnly) {
              event.data.type = 'gotScreen';
              return event.source.postMessage(event.data, '*');
            }
            handleMessage(event);
          }, 6000);
          return;
        } catch (err) {
          return event.source.postMessage({ err: err }, '*');
        }
      }
      if (event.data.installOnly) {
        event.data.type = 'gotScreen';
        return event.source.postMessage(event.data, '*');
      }
      window.chrome.runtime.sendMessage(extId, event.data, function (data) {
        data.id = event.data.id;
        event.source.postMessage(data, '*');
      });
    };
    initialized = true;
    window.addEventListener('message', handleMessage);
  };

  function getDefaultChromeConstraints() {
    return {
      audio: false,
      video: {
        mandatory: {
          chromeMediaSource: 'desktop',
          maxWidth: window.screen.width,
          maxHeight: window.screen.height,
          maxFrameRate: 15
        }
      }
    };
  }

  var messageCounter = 0;

  var requestScreenShare = function requestScreenShare(constraints, installOnly) {
    if (!window.navigator || !window.navigator.mediaDevices || !window.navigator.mediaDevices.getUserMedia) {
      if (!Promise) {
        throw new Error('requestScreenShare called in unsupported browser');
      }
      return Promise.reject(new Error('Unsupported'));
    }
    if (!window.chrome) {
      if (installOnly) {
        return Promise.resolve();
      }
      var ffConstraints = constraints && constraints.firefox || {
        audio: false,
        video: { mediaSource: 'window' }
      };
      return window.navigator.mediaDevices.getUserMedia(ffConstraints);
    } else if (window.chrome && !window.chrome.runtime) {
      if (installOnly) {
        return Promise.resolve();
      }
      var chromeConstraints = constraints && constraints.chrome || getDefaultChromeConstraints();
      return window.navigator.mediaDevices.getUserMedia(chromeConstraints);
    } else {
      var messageId = messageCounter++;
      return new Promise(function (resolve, reject) {
        var boundFunction = void 0;
        var handleMessage = function handleMessage(event) {
          if (event && event.data === 'process-tick') {
            return; // ignore this, don't resolve or reject
          }
          if (!event || !event.data) {
            return; // this is not for us either
          }
          if (event.data.id !== messageId) {
            return;
          }
          if (window === window.parent) {
            if (event && event.data && (event.data.type === 'getScreen' || event.data.type === 'getScreenPending')) {
              return; // ignore, using on non-iframe
            }
          }
          window.removeEventListener('message', boundFunction);
          if (!event.data.sourceId) {
            if (event.data.err) {
              return reject(event.data.err);
            }
            if (event.data.installOnly) {
              return resolve(event.data);
            }
            return reject(new Error('User Cancellation'));
          }
          var chromeConstraints = constraints && constraints.chrome || getDefaultChromeConstraints();
          chromeConstraints.video.mandatory.chromeMediaSourceId = event.data.sourceId;
          window.navigator.mediaDevices.getUserMedia(chromeConstraints).then(resolve, reject);
        };
        boundFunction = handleMessage.bind(this);
        setTimeout(function () {
          reject(new Error('Screen capture timeout'));
        }, 6500);
        window.addEventListener('message', boundFunction);
        window.parent.postMessage({ type: 'getScreen', installOnly: installOnly, id: messageId, url: window.location.origin }, '*');
      });
    }
  };

  var index = {
    initializeScreenShare: initializeScreenShare,
    requestScreenShare: requestScreenShare
  };

  return index;

})));
